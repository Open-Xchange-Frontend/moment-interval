(function (root, factory) {
    'use strict';

    /*global define*/
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory);                 // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('moment')); // Node
    } else {
        factory(root.moment);                        // Browser
    }
}(this, function (moment) {
    'use strict';

    // Do not load moment-interval a second time.
    if (moment.fn.formatInterval !== undefined) { return moment; }

    var regex = /(G+|y+|Y+|M+|w+|W+|D+|d+|F+|E+|u+|a+|H+|k+|K+|h+|m+|s+|S+|z+|Z+|v+|V+)|\[((?:[^\[\]]|\[\])+)\]|(\[\])/g;

    /**
     * get formatstring from locale object
     * @param  { Moment }   end     enddate of the interval
     * @param  { Boolean }  time    force time format
     * @return { String }           moment format string
     */
    function getFormat(end, time) {
        var loc = locale[moment.locale()],
            formats = locale.formats,
            f;

        if (time) {
            var is12h = this.localeData().longDateFormat('LT').toLowerCase().indexOf('a') > -1,
                m = moment.localeData().meridiem;
            f = is12h ? loc.hm : loc.Hm;

            if (is12h && (m(this.hours(), this.minutes(), true) !== m(end.hours(), end.minutes(), true))) {
                return formats[f.a];
            } else if (!this.isSame(end, 'hour')) {
                return formats[is12h ? f.h : f.H];
            } else if (!this.isSame(end, 'minute')) {
                return formats[f.m];
            }
            return 'LT';
        } else {
            f = loc.yMMMd;
            if (!this.isSame(end, 'year')) {
                return formats[f.y];
            } else if (!this.isSame(end, 'month')) {
                return formats[f.M];
            } else if (!this.isSame(end, 'day')) {
                return formats[f.d];
            } else {
                return 'llll';
            }
        }
    }

    /**
     * split formatstring and apply them to moment-format
     * @param  { Moment } end    enddate of the interval
     * @param  { String } format moment date foramt string
     * @return { String }        formated date interval
     */
    function formatInterval(end, format) {
        var fields = {}, match;
        regex.lastIndex = 0;
        while ((match = regex.exec(format))) {
            if (!match[1]) continue;
            var letter = match[1].charAt(0);
            if (fields[letter]) break;
            fields[letter] = true;
        }
        if (regex.lastIndex) {
            return this.format(format.slice(0, match.index)) + end.format(format.slice(match.index));
        } else {
            return this.format(format);
        }
    }

    /**
     * define formatInteravl function
     * @param  { Moment }   end         enddate of the interval
     * @param  { String }   dateOrTime  force date or time format (optinal)
     * @return { String }               formated date interval
     */
    moment.fn.formatInterval = function (endMoment, dateOrTime) {

        if (!endMoment) {
            dateOrTime |= 'date';
            return this.format(dateOrTime === 'date' ? 'l' : 'LT');
        }
        // parse to moment
        endMoment = moment(endMoment);

        if (!dateOrTime) {
            dateOrTime = this.isSame(endMoment, 'day') ? 'time' : 'date';
        }
        var format;
        if (dateOrTime !== 'time' && dateOrTime !== 'date') {
            format = locale[moment.locale()].fallback;
            return format.replace('{0}',this.format(dateOrTime)).replace('{1}', endMoment.format(dateOrTime));
        } else {
            format = getFormat.call(this, endMoment, dateOrTime === 'time');

            return formatInterval.call(this, endMoment, format);
        }

    };

    // locale data
    var locale = {{{ locale }}};

    return moment;
}));
